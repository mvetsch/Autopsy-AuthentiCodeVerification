/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.modules.authenticode;

import org.sleuthkit.autopsy.ingest.IngestModuleIngestJobSettings;
import org.sleuthkit.autopsy.ingest.IngestModuleIngestJobSettingsPanel;

/**
 *
 * @author root
 */
public class AuthentiCodeJobSettingsPanel extends IngestModuleIngestJobSettingsPanel {

    private final AuthentiCodeIngestModuleJobeSettings settings;


    /**
     * Creates new form AuthentiCodeJobSettingsPanel
     */
    public AuthentiCodeJobSettingsPanel(AuthentiCodeIngestModuleJobeSettings settings) {
        this.settings = settings;
        initComponents();
        setCheckBoxesFromSettings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        computeSHA1 = new javax.swing.JCheckBox();
        computeSHA256 = new javax.swing.JCheckBox();
        computeSHA512 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(computeSHA1, org.openide.util.NbBundle.getMessage(AuthentiCodeJobSettingsPanel.class, "AuthentiCodeJobSettingsPanel.computeSHA1.text")); // NOI18N
        computeSHA1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeSHA1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(computeSHA256, org.openide.util.NbBundle.getMessage(AuthentiCodeJobSettingsPanel.class, "AuthentiCodeJobSettingsPanel.computeSHA256.text")); // NOI18N
        computeSHA256.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeSHA256ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(computeSHA512, org.openide.util.NbBundle.getMessage(AuthentiCodeJobSettingsPanel.class, "AuthentiCodeJobSettingsPanel.computeSHA512.text")); // NOI18N
        computeSHA512.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeSHA512ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AuthentiCodeJobSettingsPanel.class, "AuthentiCodeJobSettingsPanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(computeSHA1)
                    .addComponent(computeSHA256)
                    .addComponent(computeSHA512)
                    .addComponent(jLabel1))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(computeSHA1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(computeSHA256)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(computeSHA512)
                .addContainerGap(178, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void computeSHA1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeSHA1ActionPerformed
        this.settings.setSha1Enabled(this.computeSHA1.isSelected());
    }//GEN-LAST:event_computeSHA1ActionPerformed

    private void computeSHA256ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeSHA256ActionPerformed
        this.settings.setSha256Enabled(this.computeSHA256.isSelected());
    }//GEN-LAST:event_computeSHA256ActionPerformed

    private void computeSHA512ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeSHA512ActionPerformed
        this.settings.setSha512Enabled(this.computeSHA512.isSelected());
    }//GEN-LAST:event_computeSHA512ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox computeSHA1;
    private javax.swing.JCheckBox computeSHA256;
    private javax.swing.JCheckBox computeSHA512;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public IngestModuleIngestJobSettings getSettings() {
        return settings;
    }

    private void setCheckBoxesFromSettings() {
        this.computeSHA1.setSelected(this.settings.isSha1Enabled());
        this.computeSHA256.setSelected(this.settings.isSha256Enabled());
        this.computeSHA512.setSelected(this.settings.isSha512Enabled());
    }
}
